/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Gear = {
  _type: "gear";
  gear?: string;
  description?: string;
  affiliateLink?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type GearsPage = {
  _id: string;
  _type: "gearsPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  subHeading?: string;
  gears?: Array<{
    _key: string;
  } & Gear>;
  youtubeReferenceVideo?: string;
};

export type Wallpaper = {
  _type: "wallpaper";
  wallpaper?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type WallpapersPage = {
  _id: string;
  _type: "wallpapersPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  premiumLink?: string;
  wallpapers?: Array<{
    _key: string;
  } & Wallpaper>;
};

export type Media = {
  _type: "media";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type GalleryPage = {
  _id: string;
  _type: "galleryPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  subHeading?: string;
  medias?: Array<{
    _key: string;
  } & Media>;
};

export type Company = {
  _type: "company";
  companyName?: string;
  companyLogo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  companyWebsiteLink?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  heroSection?: Hero;
  aboutSection?: About;
  companiesSection?: Companies;
  ytVideosSection?: YtVideos;
  testimonialsSection?: TestimonialsSection;
  faqSection?: FaqSection;
};

export type FaqSection = {
  _type: "faqSection";
  heading?: string;
  subHeading?: string;
  faqs?: Array<{
    question?: string;
    answer?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "faq";
    _key: string;
  }>;
};

export type TestimonialsSection = {
  _type: "testimonialsSection";
  heading?: string;
  subHeading?: string;
  testimonials?: Array<{
    author?: string;
    quote?: string;
    _type: "testimonial";
    _key: string;
  }>;
};

export type YtVideos = {
  _type: "ytVideos";
  heading?: string;
  subHeading?: string;
  videos?: Array<{
    videoId?: string;
    _type: "video";
    _key: string;
  }>;
};

export type Companies = {
  _type: "companies";
  heading?: string;
  companiesList?: Array<{
    _key: string;
  } & Company>;
};

export type About = {
  _type: "about";
  heading?: string;
  subHeading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "blockquote";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Hero = {
  _type: "hero";
  portrait?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  heading?: string;
  subHeading?: string;
  bottomImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  digitalProductLinks?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | Gear | GearsPage | Wallpaper | WallpapersPage | Media | GalleryPage | Company | HomePage | FaqSection | TestimonialsSection | YtVideos | Companies | About | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Hero;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/utils/queries.ts
// Variable: GEARS_PAGE_QUERY
// Query: *[_type == "gearsPage"] {    heading, subHeading, gears, youtubeReferenceVideo}
export type GEARS_PAGE_QUERYResult = Array<{
  heading: string | null;
  subHeading: string | null;
  gears: Array<{
    _key: string;
  } & Gear> | null;
  youtubeReferenceVideo: string | null;
}>;
// Variable: WALLPAPERS_PAGE_QUERY
// Query: *[_type == "wallpapersPage"] {  heading,  premiumLink,  wallpapers[]{    _key,    wallpaper,    image{      asset->{        _id,        url,        metadata {          dimensions,          palette,          lqip        }      }    }  }}
export type WALLPAPERS_PAGE_QUERYResult = Array<{
  heading: string | null;
  premiumLink: string | null;
  wallpapers: Array<{
    _key: string;
    wallpaper: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          palette: SanityImagePalette | null;
          lqip: string | null;
        } | null;
      } | null;
    } | null;
  }> | null;
}>;
// Variable: GALLERY_PAGE_QUERY
// Query: *[_type == "galleryPage"] {  heading,  subHeading,  medias[]{    _key,    title,    image{      asset->{        _id,        url,        metadata {          dimensions,          palette,          lqip        }      }    }  }}
export type GALLERY_PAGE_QUERYResult = Array<{
  heading: string | null;
  subHeading: string | null;
  medias: Array<{
    _key: string;
    title: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          palette: SanityImagePalette | null;
          lqip: string | null;
        } | null;
      } | null;
    } | null;
  }> | null;
}>;
// Variable: HOME_PAGE_QUERY
// Query: *[_type == "homePage"] {  heroSection {    portrait {      asset->{        _id,        url,        metadata { dimensions, palette, lqip }      }    },    heading,    subHeading,    bottomImages[] {      asset->{        _id,        url,        metadata { dimensions, palette, lqip }      }    },    digitalProductLinks  },  aboutSection {    heading,    subHeading,    content[] {      ...,      markDefs[]{        ...,        _type == "link" => {          _type,          href        }      }    },    image {      asset->{        _id,        url,        metadata { dimensions, palette, lqip }      }    }  },  companiesSection {    heading,    companiesList[] {      companyName,      companyWebsiteLink,      companyLogo {        asset->{          _id,          url,          metadata { dimensions }        }      }    }  },  ytVideosSection {    heading,    subHeading,    "videos": videos[0..11] {      videoId    }  },  testimonialsSection {    heading,    subHeading,    testimonials[] {      author,      quote    }  },  faqSection {    heading,    subHeading,    faqs[] {      question,      answer[] {        ...,        markDefs[]{          ...,          _type == "link" => {            _type,            href          }        }      }    }  }}
export type HOME_PAGE_QUERYResult = Array<{
  heroSection: {
    portrait: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          palette: SanityImagePalette | null;
          lqip: string | null;
        } | null;
      } | null;
    } | null;
    heading: string | null;
    subHeading: string | null;
    bottomImages: Array<{
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          palette: SanityImagePalette | null;
          lqip: string | null;
        } | null;
      } | null;
    }> | null;
    digitalProductLinks: string | null;
  } | null;
  aboutSection: {
    heading: string | null;
    subHeading: string | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "normal";
      listItem?: never;
      markDefs: Array<{
        href: string | null;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          palette: SanityImagePalette | null;
          lqip: string | null;
        } | null;
      } | null;
    } | null;
  } | null;
  companiesSection: {
    heading: string | null;
    companiesList: Array<{
      companyName: string | null;
      companyWebsiteLink: string | null;
      companyLogo: {
        asset: {
          _id: string;
          url: string | null;
          metadata: {
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | null;
  ytVideosSection: {
    heading: string | null;
    subHeading: string | null;
    videos: Array<{
      videoId: string | null;
    }> | null;
  } | null;
  testimonialsSection: {
    heading: string | null;
    subHeading: string | null;
    testimonials: Array<{
      author: string | null;
      quote: string | null;
    }> | null;
  } | null;
  faqSection: {
    heading: string | null;
    subHeading: string | null;
    faqs: Array<{
      question: string | null;
      answer: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs: Array<{
          href: string | null;
          _type: "link";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"gearsPage\"] {\n    heading, subHeading, gears, youtubeReferenceVideo\n}": GEARS_PAGE_QUERYResult;
    "*[_type == \"wallpapersPage\"] {\n  heading,\n  premiumLink,\n  wallpapers[]{\n    _key,\n    wallpaper,\n    image{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions,\n          palette,\n          lqip\n        }\n      }\n    }\n  }\n}": WALLPAPERS_PAGE_QUERYResult;
    "*[_type == \"galleryPage\"] {\n  heading,\n  subHeading,\n  medias[]{\n    _key,\n    title,\n    image{\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions,\n          palette,\n          lqip\n        }\n      }\n    }\n  }\n}": GALLERY_PAGE_QUERYResult;
    "*[_type == \"homePage\"] {\n  heroSection {\n    portrait {\n      asset->{\n        _id,\n        url,\n        metadata { dimensions, palette, lqip }\n      }\n    },\n    heading,\n    subHeading,\n    bottomImages[] {\n      asset->{\n        _id,\n        url,\n        metadata { dimensions, palette, lqip }\n      }\n    },\n    digitalProductLinks\n  },\n  aboutSection {\n    heading,\n    subHeading,\n    content[] {\n      ...,\n      markDefs[]{\n        ...,\n        _type == \"link\" => {\n          _type,\n          href\n        }\n      }\n    },\n    image {\n      asset->{\n        _id,\n        url,\n        metadata { dimensions, palette, lqip }\n      }\n    }\n  },\n  companiesSection {\n    heading,\n    companiesList[] {\n      companyName,\n      companyWebsiteLink,\n      companyLogo {\n        asset->{\n          _id,\n          url,\n          metadata { dimensions }\n        }\n      }\n    }\n  },\n  ytVideosSection {\n    heading,\n    subHeading,\n    \"videos\": videos[0..11] {\n      videoId\n    }\n  },\n  testimonialsSection {\n    heading,\n    subHeading,\n    testimonials[] {\n      author,\n      quote\n    }\n  },\n  faqSection {\n    heading,\n    subHeading,\n    faqs[] {\n      question,\n      answer[] {\n        ...,\n        markDefs[]{\n          ...,\n          _type == \"link\" => {\n            _type,\n            href\n          }\n        }\n      }\n    }\n  }\n}": HOME_PAGE_QUERYResult;
  }
}
